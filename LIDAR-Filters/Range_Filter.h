////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Range_Filter.h
//
// summary:	Declares the range filter class.
//			The Range Filter accepts a single scan data and crops the data that are outside of the 
//			specified range.
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <vector>
#include <cfloat>

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A range filter. </summary>
///
/// <remarks>	Ruikun, 7/17/2018. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class Range_Filter
{
private:

	/// <summary>	The filter maximum. </summary>
	float filter_max;

	/// <summary>	The filter minimum. </summary>
	float filter_min;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Range_Filter();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. 
	/// 			Overloaded constructor with user specified range. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	/// <param name="max">	The maximum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Range_Filter(float min, float max);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~Range_Filter();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Resets this object. 
	/// 			Reinitialize the filter object with a new range. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	/// <param name="max">	The maximum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void reset(float min, float max);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates the given data.
	/// 			Crops the data so it stays in the range. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="data"> A reference to the vector of the single scan data. </param>
	///
	/// <returns>	A reference to the filtered data. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<float>& update(vector<float>& data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a maximum. 
	/// 			For only adjust the maximum. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="max">	The maximum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void set_max(float max);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets a minimum. 
	/// 			For only adjust the minimum </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="min">	The minimum. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void set_min(float min);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the maximum. 
	/// 			Gets the current maximum setting. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <returns>	The calculated maximum. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	float get_max();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the minimum. 
	/// 			Gets the current minimum setting. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <returns>	The calculated minimum. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	float get_min();
};


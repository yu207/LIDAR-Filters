////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Temporal_Median_Filter.h
//
// summary:	Declares the temporal median filter class
//			The Temporal Median Filter accepts a single scan data and filter each data point with a 
//			rolling median filter of a past scan window of size D. If number of past scan is less 
//			than D, the filtered data will be the median of current past window.
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <vector>
#include <queue>
#include <set>

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A temporal median filter. </summary>
///
/// <remarks>	Ruikun, 7/15/2018. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class Temporal_Median_Filter
{
private:

	/// <summary>	The number of data points of a single scan. </summary>
	int N_size;

	/// <summary>	The size of the window of past scans. </summary>
	int D_size;

	/// <summary>	The representation of the rolling window of past scans. </summary>
	vector<queue<float>> past_scan;

	/// <summary>	The representation of the rolling window of past scans. Elements are sorted in 
	/// 			ascending order. </summary>
	vector<multiset<float>> past_scan_sorted;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Temporal_Median_Filter();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. 
	/// 			A overloaded constructor with user specified N and D values. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="N">	An int to process. </param>
	/// <param name="D">	An int to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Temporal_Median_Filter(int N, int D);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~Temporal_Median_Filter();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Resets this object. 
	/// 			Reinitialize the filter with new N and D values. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="N">	An int to process. </param>
	/// <param name="D">	An int to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void reset(int N, int D);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates the given data.
	/// 			Filter the data with a rolling median of past D scans. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="data"> A reference to the vector of the single scan data. </param>
	///
	/// <returns>	A reference to the filtered data. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<float>& update(vector<float> &data);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the size of the rolling window of past scans. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <param name="D">	An int to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void set_D(int D);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the current setting of the size of the rolling window of past scans. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <returns>	The d. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int get_D();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the current setting of the size of a single scan. </summary>
	///
	/// <remarks>	Ruikun, 7/15/2018. </remarks>
	///
	/// <returns>	The n. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int get_N();
};

